package com.jpym.ymfrontgm.service;

import com.jpym.ymfrontgm.DataDictionary.FundListDic;
import com.jpym.ymfrontgm.exception.YmfrontGmException;
import com.jpym.ymfrontgm.model.ConfirmedOrderModel;
import com.jpym.ymfrontgm.model.FundPerformanceModel;
import com.jpym.ymfrontgm.util.*;
import net.sf.json.JSONArray;
import net.sf.json.JSONObject;
import org.apache.commons.collections.map.HashedMap;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.BadSqlGrammarException;
import org.springframework.stereotype.Service;

import java.util.*;

@Service
public class QueryService {
    @Autowired
    FieldMapperService fieldMapperService;
    @Autowired
    GMFundListConfigureService gmFundListConfigureService;
    @Autowired
    FundPerformanceService fundPerformanceService;
    @Autowired
    private FundHistoryNavService fundHistoryNavService;
    @Autowired
    private FundDocumentService fundDocumentService;

    public List queryFundList(String fundname, String listType, String fundType) throws Exception {

        List<Map<String, Object>> fundProducts = new ArrayList<>();
        if (listType.getBytes("utf-8").length > 6)
            throw new YmfrontGmException(MsgConstant.ERROR_CODE, "[listType]入参数据缓冲区太小");
<<<<<<< .mine
        if (fundname.length() > 32)
            throw new YmfrontGmException(MsgConstant.ERROR_CODE, "[fundname]入参数据缓冲区太小");
        listType = StringUtil.notEmpty(fundname) ? "" : listType;
        Class fundlistCls = MsgConstant.fundListDicMap.get(FundListDic.queryCurrentDic(listType));
        FundListLg fundListLg = (FundListLg) fundlistCls.getConstructor(String.class, String.class, String.class, FundDocumentService.class, GMFundListConfigureService.class).newInstance(fundname, listType, fundType, fundDocumentService, gmFundListConfigureService);
        fundProducts = fundListLg.fundlistByFundListDic();
        //获取三方数据（日涨幅)
        Integer fundProductSize = fundProducts.size();
        for (int i = 0; i < fundProductSize; i++) {
            JSONObject currentFund = (JSONObject) fundProducts.get(i);
            currentFund.putAll(queryThirdData(currentFund.getString("fundcode")));
=======
        //当前列表类型为排行列表
        switch (listType) {
            case "01": {
                JSONArray configedFund = getConfigureTableInfo();
                JSONArray jzFunds = JSONArray.fromObject(jzQueryFundList(null, null, null)).getJSONArray(0);
                int jzFundSize = jzFunds.size();
                for (int i = 0; i < configedFund.size(); i++) {
                    for (int j = 0; j < jzFundSize; j++) {
                        JSONObject fundObj = configedFund.getJSONObject(i);
                        JSONObject jzFundObj = jzFunds.getJSONObject(j);
                        if ((fundObj.getString("fundcode").equals(jzFundObj.getString("fundcode")) && (fundObj.getString("labeltype").equals("01")))) {
                            jzFundObj.put("labeltype", "公募优选");
                            jzFundObj.put("funddescribe", fundObj.getString("funddescribe"));
                            fundProducts.add(jzFundObj);
                        }
                    }
                }
                break;
            }
            case "02": {
                fundType = StringUtil.empty(fundType) ? "" : fundType;
                if (fundType.getBytes("utf-8").length > 6)
                    throw new YmfrontGmException(MsgConstant.ERROR_CODE, "[listType]入参数据缓冲区太小");
                switch (fundType) {
                    case "":
                    case "0":
                    case "1":
                    case "2":
                    case "3":
                    case "5":
                    case "6": {
                        JSONArray funds = JSONArray.fromObject(jzQueryFundList(fundType, null, null)).getJSONArray(0);
                        fundProducts.addAll(0, funds);
                        break;
                    }
                    default:
                        break;
                }
                break;
            }
            case "03": {
                JSONArray configedFund = getConfigureTableInfo();
                JSONArray jzFunds = JSONArray.fromObject(jzQueryFundList(null, null, "1")).getJSONArray(0);
                int jzFundSize = jzFunds.size();
                for (int i = 0; i < configedFund.size(); i++) {
                    for (int j = 0; j < jzFundSize; j++) {
                        JSONObject fundObj = configedFund.getJSONObject(i);
                        JSONObject jzFundObj = jzFunds.getJSONObject(j);
                        if ((fundObj.getString("fundcode").equals(jzFundObj.getString("fundcode")) && (fundObj.getString("labeltype").equals("03")))) {
                            FundIntroductionModel fundIntroduction = fundDocumentService.searchFundIntroduction(fundObj.getString("fundcode"));
                            jzFundObj.put("labeltype", "定投优选");
                            jzFundObj.put("funddescribe", fundObj.getString("funddescribe"));
                            jzFundObj.put("yearlimit",fundObj.getString("yearlimit"));
                            jzFundObj.put("fundsize",fundIntroduction == null? "0.0":fundIntroduction.getFdtotunit());
                            jzFundObj.put("fundstarlevel",fundObj.getString("fundstarlevel"));
                            // FIXME: 2018/3/28 基金评级字段目前拿到的值为配置表信息
                            fundProducts.add(jzFundObj);
                        }
                    }
                }
                break;
            }
            default:
                break;
>>>>>>> .r372
        }
        return fundProducts;
    }

    public Map queryFundDetail(String fundcode) throws Exception {
        Map<String, Object> responseResult = new HashedMap();
        String fundCode = fundcode;
        JSONArray jzDataSet = JSONArray.fromObject(jzQueryFundList(null, fundCode, null)).getJSONArray(0);
        if (jzDataSet.size() != 0) {
            JSONObject currentFund = jzDataSet.getJSONObject(0);
            // FIXME: 2018/3/23 二期基金状态可能会有特殊更改
            String fundStatus = currentFund.getString("status");
            String availableSubscriptionStatus = "0678";
            boolean isMatch = availableSubscriptionStatus.contains(fundStatus);
            currentFund.put("subscriptionstatus", isMatch ? "01" : "00");
            String fundBusinessFlag = currentFund.getString("business_flag");
            currentFund.put("fixedinveststate", isMatch && fundBusinessFlag.contains("1") ? "01" : "00");
            responseResult.putAll(currentFund);
            JSONArray fundProductSet = JSONArray.fromObject(queryJzFundDetali(fundCode));
            JSONArray detaliArr = fundProductSet.getJSONArray(0);
            JSONArray thirdSetArr = fundProductSet.getJSONArray(3);
            if (detaliArr.size() != 0) {
                JSONObject jzFundDetail = detaliArr.getJSONObject(0);
                responseResult.putAll(jzFundDetail);
            }
            if (thirdSetArr.size() != 0) {
                JSONObject thirdSetDetail = thirdSetArr.getJSONObject(0);
                responseResult.putAll(thirdSetDetail);
                responseResult.put("currentyearincome", thirdSetDetail.getString("return"));
            }
        }
        responseResult.putAll(queryThirdData(fundCode));
        return responseResult;
    }
    private Map queryThirdData(String fundCode) throws Exception{
        Map fieldAddMap = new HashMap();
        try {
            //获取三方数据（日涨幅)
            Object currentFundNativeNav = fundHistoryNavService.searchFundHistoryNavByPaging(fundCode, 1, 2);
            JSONArray currentFundNav = JSONArray.fromObject(currentFundNativeNav);
            if (currentFundNav.size() != 0) {
                JSONObject fundnav = currentFundNav.getJSONObject(0);
                fieldAddMap.putAll(fundnav);
            }
            //查询近三月收益率字段
            FundPerformanceModel currentFundYeildRate = fundPerformanceService.searchFundPerformance(fundCode);
            if (currentFundYeildRate != null) {
                JSONObject fundYeild = JSONObject.fromObject(currentFundYeildRate);
                fieldAddMap.putAll(fundYeild);
            }
        } catch (BadSqlGrammarException sqlException) {
            System.out.println(sqlException.getMessage());
        }
        return fieldAddMap;
    }
    public List queryHistoryTradeOnline(Map<String, Object> applyParamMap) throws Exception {
        List<Map<String, Object>> OnlineTradeList = new ArrayList<>();
        Object jzApplyBody = JzHttpService.webApiRequest(applyParamMap);
        JSONArray applyArr = JSONArray.fromObject(jzApplyBody).getJSONArray(0);
        String custno = applyParamMap.get("custno").toString();
        //2.可撤单交易列表
        JSONArray cancleTradeArr = JSONArray.fromObject(queryCancleOrderList(custno).getData()).getJSONArray(0);
        Integer applySize = applyArr.size();
        //状态：status委托状态定义：00待复核；01待勾兑；02待报；04废单；05已撤；06已报；07已确认；08已结束
        for (int i = 0; i < applySize; i++) {
            JSONObject tradeOrder = applyArr.getJSONObject(i);
//           02：待报不等同于可撤单(网上交易控制有关) (存在可撤单列表中，为可撤单，否则为不可撤单,)
            String status = tradeOrder.getString("status");
            switch (status) {
                case "02": {
                    Iterator cancleTradeOrder = cancleTradeArr.iterator();
                    while (cancleTradeOrder.hasNext()) {
                        JSONObject order = JSONObject.fromObject(cancleTradeOrder.next());
                        if (order.getString("appsheetserialno").equals(tradeOrder.getString("appsheetserialno"))) {
//                            tradeOrder.put("statusname", "可撤单");
                            tradeOrder.put("cancelstatus", "01"); // 可撤单标记 00：不可撤单，01可撤单
                            tradeOrder.put("date", tradeOrder.getString("operdate"));
                            if (!tradeOrder.getString("paystatus").equals("03")) {
                                OnlineTradeList.add(tradeOrder);
                            }
                            break;
                        }
                    }
//            1.下单未支付(待报不可撤单)paystatus(00) eg:支付前突然断电，
//            2.通过定投协议下单内容不可撤单，eg:该委托为系统下单，不允许撤单！
                    if (!OnlineTradeList.contains(tradeOrder)) {
//                        tradeOrder.put("statusname", "不可撤单");
//                        tradeOrder.put("status", "02");   //待报 标记
                        tradeOrder.put("cancelstatus", "00"); // 可撤单标记 00：不可撤单，01可撤单
                        tradeOrder.put("date", tradeOrder.getString("operdate"));
                        if (!tradeOrder.getString("paystatus").equals("03")) {
                            OnlineTradeList.add(tradeOrder);
                        }
                    }
                    break;
                }
//                eg:下了单未支付，收市以后，在导出上报文件之后就变为废单
//                case "04" : {
//                    tradeOrder.put("statusname", "废单");
//                    tradeOrder.put("date",tradeOrder.getString("operdate"));
//                    OnlineTradeList.add(tradeOrder);
//                    break;
//                }
//                case "05" : {
//                    tradeOrder.put("statusname", "已撤单");
//                    tradeOrder.put("date",tradeOrder.getString("operdate"));
//                    OnlineTradeList.add(tradeOrder);
//                    break;
//                }
                case "06": {
//                    tradeOrder.put("statusname", "在途");
                    tradeOrder.put("date", tradeOrder.getString("operdate"));
                    tradeOrder.put("cancelstatus", "00"); // 可撤单标记 00：不可撤单，01可撤单
                    OnlineTradeList.add(tradeOrder);
                    break;
                }
//                case "08": {
//                    String returncode = tradeOrder.getString("returncode");
//                    switch (returncode) {
//                        case "0000" :{
//                            tradeOrder.put("statusname", "确认成功已结束");
//                            break;
//                        }
//                        default: {
//                            tradeOrder.put("statusname", tradeOrder.getString("returnmsg"));
//                            break;
//                        }
//                    }
//                    tradeOrder.put("date",tradeOrder.getString("transactioncfmdate"));
//                    OnlineTradeList.add(tradeOrder);
//                    break;
//                }
                default:
                    break;
            }
        }

        return OnlineTradeList;
    }


    public List queryHistoryTradeConfirm(Map<String, Object> confirmParamMap) throws Exception {
        String custno = confirmParamMap.get("custno").toString();
        List tradeConfirmAndcancled = new ArrayList();
        Object jzConfirmBody = JzHttpService.webApiRequest(confirmParamMap);
        //历史交易确认
        JSONArray jzConfirmArr = JSONArray.fromObject(jzConfirmBody).getJSONArray(0);
        if (jzConfirmArr.size() != 0) {
            List<Map<String, Object>> confirmTrade = new ArrayList();
            for (Object tradeObj : jzConfirmArr) {
                JSONObject alterObj = JSONObject.fromObject(tradeObj);
                String returnCode = alterObj.getString("returncode");
                if (returnCode.equals("0000")) {
                    alterObj.put("statusname", "确认成功");
                    alterObj.put("date", alterObj.getString("transactioncfmdate")); //此处为确认日期
                } else {
                    alterObj.put("statusname", "确认失败");
                    alterObj.put("date", alterObj.getString("transactioncfmdate")); //此处为确认日期
                }
                confirmTrade.add(alterObj);
            }
            if (confirmTrade.size() != 0) {
                confirmTrade = fieldMapperService.getNewResults(confirmTrade, ConfirmedOrderModel.class);
                tradeConfirmAndcancled.addAll(confirmTrade);
            }
        }
        //历史交易已撤单
        JSONArray jzCancledOrder = JSONArray.fromObject(jzQueryHistoryTradeApplay(custno, "05")).getJSONArray(0);
        if (jzCancledOrder.size() != 0) {
            List<Map<String, Object>> cancledTrade = new ArrayList();
            for (Object tradeObj : jzCancledOrder) {
                JSONObject alterObj = JSONObject.fromObject(tradeObj);
                alterObj.put("statusname", "已撤单");
                alterObj.put("date", alterObj.getString("operdate")); //此处为操作日期
                cancledTrade.add(alterObj);
            }
            if (cancledTrade.size() != 0) {
                cancledTrade = fieldMapperService.getNewResults(cancledTrade, ConfirmedOrderModel.class);
                tradeConfirmAndcancled.addAll(cancledTrade);
            }
        }
        return tradeConfirmAndcancled;
    }


    /**
     * 字典 430306 查询基金列表
     */
    public Object jzQueryFundList(String fundtype, String fundcode, String busiflag) throws Exception {
        Map<String, Object> paramMap = new HashMap<>();
        paramMap.put("trantype", "430306");
        paramMap.put("mktflag", "");
        String fundType = StringUtil.empty(fundtype) ? "" : fundtype;
        paramMap.put("fundtype", fundType); //0-股票型，1-债券型，2-货币型，3-混合型，4-专户基金，5-指数型，6-QDII
        String fundCode = StringUtil.empty(fundcode) ? "" : fundcode;
        busiflag = StringUtil.empty(busiflag) ? "" : busiflag;
        paramMap.put("busiflag", busiflag);
        paramMap.put("fundcode", fundCode);
        Object jzBody = JzHttpService.webApiRequest(paramMap);
        return jzBody;
    }

    /**
     * 字典 430312 查询历史交易申请
     *
     * @param status 申请单状态
     * @param custno 客户号
     */
    private Object jzQueryHistoryTradeApplay(String custno, String status) throws Exception {
        Map<String, Object> applyParamMap = new HashMap<>();
        applyParamMap.put("trantype", "430312");
        applyParamMap.put("begindate", "00000000");
        applyParamMap.put("enddate", MsgConstant.format.format(new Date()));
        // FIXME: 2018/3/23 本期查询历史交易记录的业务，后期可能为修改
        applyParamMap.put("businesscode", "22,24,59");
        applyParamMap.put("custno", custno);
        applyParamMap.put("status", status);
        ParamUtil.paramNullCheck(applyParamMap);
        //必传可为空
        applyParamMap.put("paycenterid", "");
        applyParamMap.put("fundcode", "");
        return JzHttpService.webApiRequest(applyParamMap);
    }

    /**
     * 字典 430311 查询可撤单交易申请
     * 在途交易内部
     *
     * @param custno 客户号
     */
    /**
     * @param custno
     * @return
     * @throws Exception
     */
    private Result queryCancleOrderList(String custno) throws Exception {
        Map<String, Object> paramMap = new HashMap<>();
        paramMap.put("trantype", "430311");
        paramMap.put("custno", custno);
        ParamUtil.paramNullCheck(paramMap);
        Object jzBody = JzHttpService.webApiRequest(paramMap);
        // TODO: 2017/12/26  撤单列表 内部逻辑处理
        return ResultUtil.success(MsgConstant.SUCCESS_CODE, "可撤单列表查询成功", jzBody);
    }

    /**
     * 字典 430307 查询基金信息
     *
     * @param fundcode 基金代码
     */
    private Object queryJzFundDetali(String fundcode) throws Exception {
        Map<String, Object> detailParamMap = new HashMap<>();
        detailParamMap.put("trantype", "430307");
        detailParamMap.put("fundcode", fundcode);
        detailParamMap.put("tano", "");
        Object jzDetailBody = JzHttpService.webApiRequest(detailParamMap);
        return jzDetailBody;
    }

    /**
     * 字典 441302 查询定投预计首次执行时间
     *
     * @param investcycle      投资周期类型
     * @param investcycleValue 投资周期类型值
     */
//    @GetMapping(value = "/queryFixTrade")
    public String queryFixTrade(String investcycle, String investcycleValue, String investperiodsvalue) throws Exception {
        Map<String, Object> paramMap = new HashMap<>();
        paramMap.put("trantype", "441302");
        paramMap.put("investcycle", investcycle); //0-每月 1-每周 2-每双周
        paramMap.put("investcycleValue", investcycleValue); //每月：每月X号 每周：周X，每双周：第n个周X 每十天：第X天
        paramMap.put("investperiodsvalue", investperiodsvalue); // 1-月 1-每周 2-每双周 区分双周的第几个周
        ParamUtil.paramNullCheck(paramMap);
        Object jzBody = JzHttpService.webApiRequest(paramMap);
        JSONArray firstSet = JSONArray.fromObject(jzBody).getJSONArray(0);
        JSONObject firstObj = firstSet.getJSONObject(0);
        // TODO: 2017/12/26  首次执行日期 内部使用 测试环境下日期跟实际日期不同步
        return firstObj.getString("firstinvestdate");
    }

    /**
     * 分红service
     */
    public List queryHistoryBonus(Map<String, Object> paramMap) throws Exception {
        Object jzBody = JzHttpService.webApiRequest(paramMap);
        JSONArray resultSet = JSONArray.fromObject(jzBody);
        JSONArray firstSet = resultSet.getJSONArray(0);
        return firstSet;
    }

    public JSONObject queryCustInfo(Map params) throws Exception {
        JSONObject custInfo = new JSONObject();
        Map<String, Object> paramMap = new HashMap<>();
        paramMap.put("trantype", "430303");
        paramMap.putAll(params);
        Object jzBody = JzHttpService.webApiRequest(paramMap);
        if (JSONArray.fromObject(jzBody).getJSONArray(0).size() != 0) {
            custInfo = JSONArray.fromObject(jzBody).getJSONArray(0).getJSONObject(0);
        }
        return custInfo;
    }
}
